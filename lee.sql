SELECT * FROM TAB;


--모든데이터
/*           */
SELECT * FROM CUSTOM;

SELECT * FROM COMPANY;

SELECT USERID,PAY,ROUND(PAY,-4) DAY FROM COMPANY;

--770322-1******

SELECT * FROM CUSTOM;
SELECT JUMIN FROM CUSTOM;
SELECT SUBSTR(JUMIN,1,8) JUMIN FROM CUSTOM; --주민번호의 앞의 8자리를 추출
SELECT RPAD(SUBSTR(JUMIN,1,8),14,'*') JUMIN FROM CUSTOM; -- 주민번호의 앞의 8자리를 추출후, 총 글자수를 14자리로 잡고 나머지 글자를 *로 변환

SELECT * FROM CUSTOM;
SELECT COUNT(*) INWON FROM CUSTOM WHERE JOB='회사원';
SELECT COUNT(*) INWON FROM CUSTOM WHERE ADDR1 LIKE '서울%';
SELECT COUNT(*) INWON FROM CUSTOM WHERE POINT>=200;

SELECT * FROM COMPANY; --테이블 이름과 중복되면 안됨

SELECT SUM(PAY) FROM COMPANY WHERE POSIT='대리';


SELECT * FROM CUSTOM;

SELECT JOB,COUNT(*) INWON FROM CUSTOM GROUP BY JOB;

--학력별 포인트의 평균을 구하시오

SELECT * FROM CUSTOM;
SELECT SCHOL,ROUND(AVG(POINT)) POINT FROM CUSTOM GROUP BY SCHOL;

--지역별 포인트의 합계를 구하시오
SELECT * FROM CUSTOM;
SELECT ADDR1,ROUND(SUM(POINT)) INWON,MAX(POINT) "MAX", MIN(POINT) "MIN" FROM CUSTOM GROUP BY ADDR1;

--성별 나이의 평균, 인원수을 구하시오
SELECT SEX,ROUND(AVG(AGE)) "AVG", COUNT(*) "CNT" FROM CUSTOM GROUP BY SEX;

/* --자바의 SWITCH CASE문
SELECT 
CASE 컬럼명                         
	WHEN 1 THEN 100                          
	WHEN 2 THEN 200                         
	WHEN 3 THEN 300                         
	WHEN 4 THEN 400                          
	ELSE 500                        
END AS RESULT             
FROM DUAL;
*/

SELECT CASE SEX 
WHEN '1' THEN '남자' 
WHEN '0' THEN '여자' 
END GENDER ,ROUND(AVG(AGE)) "AVG", COUNT(*) "CNT" FROM CUSTOM GROUP BY SEX;

SELECT * FROM COMPANY;

--직책별 월급의 합, 평균, MAX, MIN
SELECT POSIT, COUNT(*) CNT,
ROUND(AVG(PAY)) 평균,
MAX(PAY) 최대,MIN(PAY) 최소 
FROM COMPANY GROUP BY POSIT
HAVING COUNT(*) > 60; --ORDER BY를 제외하면 아무도 별칭을 가져다 쓰지 못함


---------------------------------------------2022/01/25---------------------------------------------

--JOIN문 //SELECT AA.A,B,D, BB.A,E,F FROM AA,BB WHERE AA.A = BB.A; //공통분모 찾기 //AA와 BB에서 공통되는 A 데이터값 가져오기
/*
 
 - 총 5개
 
EQUI JOIN(INNER JOIN) //EQUI JOIN = 오라클 SQL //INNER JOIN = ANSI 표준 SQL //INNER 보다 EQUI가 더 짧기에 더 많이 씀
NON-EQUI JOIN //오라클에만 있는 JOIN문
OUTER JOIN
CROSS JOIN
SELF JOIN
*/

SELECT * FROM CUSTOM; 
SELECT * FROM COMPANY;

--EQUI JOIN---------------------------------------------
SELECT A.USERID, USERNAME, ADDR1, B.USERID, COMPANY, DEPT, POSIT, PAY --공통된 데이터값은 A.AA 같은식으로 명시해줘야함
FROM CUSTOM A,COMPANY B												  --INNER JOIN문은 모든 JOIN문의 기본.
WHERE A.USERID = B.USERID;


--INNER JOIN---------------------------------------------
SELECT A.USERID, USERNAME, ADDR1, B.USERID, COMPANY, DEPT, POSIT, PAY --공통된 데이터값은 A.AA 같은식으로 명시해줘야함
FROM CUSTOM A INNER JOIN COMPANY B									  
ON A.USERID = B.USERID;

--테이블 'CUSTOM'에서 UserID, UserName을 검색하고
--POINT 테이블에서 제품 구입, 로그인에 관계된 POINT 점수(Product, Login)를 검색

SELECT * FROM POINT;

SELECT A.USERID, USERNAME, PRODUCT, LOGIN FROM CUSTOM A, POINT B 
WHERE A.USERID=B.USERID 
AND LOGIN >= 10;

SELECT A.USERID, USERNAME, PRODUCT, LOGIN FROM CUSTOM A INNER JOIN POINT B 
ON A.USERID=B.USERID --AND LOGIN >= 10;; 
WHERE LOGIN >= 10;

--OUTER JOIN---------------------------------------------
--특정 테이블이 기준이 되어 데이터를 찾아옴

SELECT COUNT(*) FROM CUSTOM; --459
SELECT COUNT(*) FROM COMPANY; --464

--CUSTOM 기준

SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT --INNER JOIN문에서 '(+)' 추가해줌
FROM CUSTOM A, COMPANY B
WHERE A.USERID=B.USERID(+);

SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM A LEFT OUTER JOIN COMPANY B
ON A.USERID=B.USERID;

--COMPANY 기준

SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM A, COMPANY B
WHERE A.USERID(+)=B.USERID;

SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM A RIGHT OUTER JOIN COMPANY B
ON A.USERID=B.USERID;


SELECT * FROM RESEARCH;

SELECT COUNT(*) FROM RESEARCH;

SELECT A.USERID, USERNAME, ANSWER
FROM CUSTOM A, RESEARCH B
WHERE A.USERID=B.USERID(+) AND ANSWER IS NULL;

SELECT A.USERID, USERNAME, ANSWER
FROM CUSTOM A LEFT OUTER JOIN RESEARCH B
ON A.USERID=B.USERID WHERE ANSWER IS NULL;

--CROSS JOIN(상호조인)---------------------------------------------

SELECT COUNT(*) FROM CUSTOM; --459
SELECT COUNT(*) FROM COMPANY; --464

SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT --INNER조인문에서 조건문을 삭제 // 459 * 464 = 약 21만개 생성
FROM CUSTOM A, COMPANY B;						--쓸모없는 데이터지만 데이터를 토대로 활용할때 사용
--WHERE A.USERID=B.USERID;



--SELF JOIN(셀프조인)---------------------------------------------

SELECT * FROM CUSTOM;

DESC CUSTOM;

SELECT DISTINCT A.* --A라는 테이블의 모든 데이터 값을 가져와라 //DISTINCT : 중복되는 값은 하나만 출력해~ (동일값 3개 이상일경우 DISTINCT 사용)
FROM CUSTOM A , CUSTOM B --알아서 스스로 자신이 조인함
WHERE A.USERNAME=B.USERNAME
AND A.USERID<>B.USERID --A랑 B의 USERID가 겹치면 안돼~ 서로 틀려야돼~
ORDER BY A.USERNAME, A.USERID;



--'CUSTOM' 테이블에서 '제주도'에 살고 있는 사람 중에 동일한 이름을 갖는 행을 검색

SELECT * FROM CUSTOM WHERE ADDR1='제주도';

SELECT A.*
FROM CUSTOM A, CUSTOM B
WHERE A.ADDR1 = '제주도' AND B.ADDR1 = '제주도' AND (A.USERNAME=B.USERNAME AND A.JUMIN<>B.JUMIN) ORDER BY A.USERNAME;

SELECT A.*
FROM CUSTOM A INNER JOIN CUSTOM B
ON A.USERNAME=B.USERNAME
WHERE A.USERID<>B.USERID AND A.ADDR1 = '제주도' AND B.ADDR1 = '제주도'
ORDER BY A.USERNAME;



SELECT * FROM CUSTOM;
SELECT * FROM COMPANY;
SELECT * FROM POINT;
------------CUSTOM--------------COMPANY--------POINT-----------------
SELECT A.USERID, USERNAME, COMPANY, DEPT, PRODUCT, LOGIN
FROM CUSTOM A, COMPANY B, POINT C WHERE A.USERID=B.USERID AND A.USERID= C.USERID;

SELECT A.USERID, USERNAME, COMPANY, DEPT, PRODUCT, LOGIN
FROM CUSTOM A INNER JOIN COMPANY B 
ON A.USERID=B.USERID INNER JOIN POINT C 
ON A.USERID=C.USERID; 


--UNION/ALL---------------------------------------------

SELECT * FROM CUSTOM;

CREATE TABLE JEJU
AS
SELECT * FROM CUSTOM WHERE ADDR1='제주도';   --커스텀에서 제주 TABLESPACE생성

SELECT * FROM JEJU;

CREATE TABLE KYUNG
AS
SELECT * FROM CUSTOM WHERE ADDR1='경기도';   --커스텀에서 경기 TABLESPACE생성

SELECT * FROM KYUNG;

CREATE TABLE SEOUL
AS
SELECT * FROM CUSTOM WHERE ADDR1='서울특별시';--커스텀에서 서울 TABLESPACE생성

SELECT * FROM SEOUL;

--------------------------------------------
SELECT * FROM JEJU
UNION
SELECT * FROM KYUNG
UNION
SELECT * FROM SEOUL;

--SUB-QUERY(하위쿼리)

--'COMPANY' 테이블에서 UserID, Company, Dept, Pay와 평균 월급을 검색
SELECT USERID, COMPANY, DEPT, PAY AVG(PAY) FROM COMPANY; --X

SELECT ROUND(AVG(PAY)) FROM COMPANY;

SELECT USERID, COMPANY, DEPT,PAY, 1782888 PAY_AVG FROM COMPANY;


SELECT USERID, COMPANY, DEPT, PAY,
(SELECT ROUND(AVG(PAY)) FROM COMPANY) AVG_PAY,
PAY-(SELECT ROUND(AVG(PAY)) FROM COMPANY) 차액 
FROM COMPANY;


--'CUSTOM' 테이블에서 평균 나이 이상인 행들을 검색

SELECT * FROM CUSTOM;
SELECT ROUND(AVG(AGE)) FROM CUSTOM; --평균 나이

SELECT * FROM CUSTOM WHERE AGE>=(SELECT AVG(AGE) FROM CUSTOM); --나이가 평균나이 이상인 행들 출력

--'COMPANY' 테이블에서 평균 월급보다 적은 월급을 받는 행을 검색

SELECT * FROM COMPANY;
SELECT AVG(PAY) FROM COMPANY; --평균 월급 //1782888

SELECT * FROM COMPANY WHERE PAY < (SELECT AVG(PAY) FROM COMPANY) ORDER BY PAY DESC; --월급이 평균 월급 미만인 행들 출력

--'현대 자동차' 회사에 근무하는 고객의 UserID, UserName, Addr1, Schol 열을 검색

SELECT * FROM COMPANY;
SELECT * FROM CUSTOM;

SELECT USERID FROM COMPANY WHERE COMPANY = '현대 자동차'; --내가한거 --X
SELECT USERID, USERNAME, ADDR1, SCHOL FROM CUSTOM WHERE USERID = (SELECT USERID FROM COMPANY WHERE COMPANY = '현대 자동차'); --내가한거 --X

SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%';

SELECT * FROM CUSTOM
WHERE USERID IN ('EE9224','EL3409');
--WHERE USERID='EE9224' OR USERID='EL3409';

SELECT * FROM CUSTOM
WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

--JOIN문 변환
SELECT A.*, COMPANY            --A.USERID, USERNAME, ADDR1, SCHOL 
FROM CUSTOM A, COMPANY B 
WHERE A.USERID=B.USERID(+) AND COMPANY LIKE '현대자동차%';


--SALES 테이블에서 4회 이상 판매 기록이 있는 고객들의 기본 정보를 검색

SELECT * FROM CUSTOM;
SELECT * FROM SALES ORDER BY USERID;
SELECT USERID,COUNT(*) CNT FROM SALES GROUP BY USERID HAVING COUNT(*) >= 4; --4회이상 판매한 고객 리스트

SELECT USERID FROM SALES GROUP BY USERID HAVING COUNT(*) >= 4; --4회이상 판매한 고객의 only USERID

SELECT * FROM CUSTOM WHERE USERID IN(SELECT USERID FROM SALES GROUP BY USERID HAVING COUNT(*) >= 4); 

--INLINE VIEW
SELECT A.* 
FROM CUSTOM A, (SELECT USERID,COUNT(*) CNT FROM SALES GROUP BY USERID HAVING COUNT(*) >= 4) B --물건을 4회 이상 판매한 고객의 테이블 () B <- 가상의 테이블 안에 데이터를 넣음 (테이블화)
WHERE A.USERID=B.USERID; --A와 B에 USERID가 있으니 JOIN화 가능

--INLINE VIEW 포맷☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

--SELECT A.*
--FROM () A, () B
--WHERE A.USERID=B.USERID;

--총 판매 금액이 100만원 이상인 'CUSTOM' 테이블에 있는 고객의 기본 정보
--100만원 이상인 사람
SELECT * FROM SALES;
SELECT USERID,COUNT(*) CNT, SUM(PRICE) HAP FROM SALES
GROUP BY USERID
HAVING SUM(PRICE)>=1000000;



--JOIN문 / INLINE VIEW

SELECT USERID,SUM(PRICE) TOT FROM SALES GROUP BY USERID HAVING SUM(PRICE)>=1000000;

SELECT A.USERID, A.USERNAME, TOT
FROM CUSTOM A, (SELECT USERID,SUM(PRICE) TOT FROM SALES GROUP BY USERID HAVING SUM(PRICE)>=1000000) B
WHERE A.USERID=B.USERID ORDER BY TOT;

--하위쿼리

SELECT USERID, SUM(PRICE) TOT FROM SALES GROUP BY USERID HAVING SUM(PRICE)>=1000000;

SELECT * FROM CUSTOM WHERE USERID IN (SELECT USERID FROM SALES GROUP BY USERID HAVING SUM(PRICE)>=1000000);

--ANY,ALL

SELECT POINT FROM CUSTOM WHERE ADDR1='제주도' ORDER BY POINT;

/*
--132 ~ 269
>ANY : 132보다 큰데이터
<ANY : 269보다 작은데이터
>ALL : 269보다 큰데이터
<ALL : 132보다 작은데이터
*/

-------------------------------------------------------->ANY

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT > (SELECT MIN(POINT) FROM CUSTOM WHERE ADDR1 = '제주도'); --이거보다

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT >ANY (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도'); --이게 훨신 빠름

--------------------------------------------------------<ANY

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT < (SELECT MAX(POINT) FROM CUSTOM WHERE ADDR1 = '제주도'); --이거보다

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT <ANY (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도'); --이게 훨신 빠름

-------------------------------------------------------->ALL

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT > (SELECT MAX(POINT) FROM CUSTOM WHERE ADDR1 = '제주도'); --이거보다

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT >ALL (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도'); --이게 훨신 빠름

--------------------------------------------------------<ALL

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT < (SELECT MIN(POINT) FROM CUSTOM WHERE ADDR1 = '제주도'); --이거보다

SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT <ALL (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도'); --이게 훨신 빠름

--------------------------------------------------------------------------------------------------------------

SELECT * FROM CUSTOM WHERE POINT =131;

UPDATE CUSTOM SET POINT=131 WHERE USERID='nn4942';


--------------------------------------------------------------------------------------------------------------

--'IN' = '=ANY'
SELECT USERID, USERNAME, ADDR1, SCHOL FROM CUSTOM
WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

SELECT USERID, USERNAME, ADDR1, SCHOL FROM CUSTOM
WHERE USERID =ANY (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

--------------------------------------------------------------------------------------------------------------

--'NOT IN' = '<>ALL'
SELECT USERID, USERNAME, ADDR1, SCHOL FROM CUSTOM
WHERE USERID NOT IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

SELECT USERID, USERNAME, ADDR1, SCHOL FROM CUSTOM
WHERE USERID <>ALL (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

--------------------------------------------------------------------------------------------------------------

SELECT USERID, USERNAME, ADDR1, SCHOL FROM CUSTOM
WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

--상관쿼리----------------------------------------------------------------------------------------------------
SELECT USERID, USERNAME, ADDR1, SCHOL FROM CUSTOM
WHERE EXISTS  
(SELECT * FROM COMPANY 
WHERE USERID=CUSTOM.USERID AND COMPANY LIKE '현대자동차%');

--------------------------------------------------------------------------------------------------------------

SELECT USERID, USERNAME, ADDR1, SCHOL FROM CUSTOM
WHERE NOT EXISTS  
(SELECT * FROM COMPANY 
WHERE USERID=CUSTOM.USERID AND COMPANY LIKE '현대자동차%');



--------------------------------------------------------------------------------------------------------------

SELECT * FROM CUSTOM WHERE ADDR1='경기도' AND AGE<=20;

SELECT * FROM (SELECT * FROM CUSTOM WHERE ADDR1='경기도') A;

SELECT * FROM (SELECT * FROM CUSTOM WHERE ADDR1='경기도') A
WHERE A.AGE<=20;

































