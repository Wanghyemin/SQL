SELECT * FROM TAB;

--모든 데이터

SELECT * FROM CUSTOM;

SELECT * FROM COMPANY;

SELECT USERID,PAY, ROUND(PAY,-4) PAY  FROM COMPANY;

SELECT * FROM CUSTOM;

-- 770322-1******
SELECT RPAD(SUBSTR(JUMIN,1,8),14,'*') JUMIN FROM CUSTOM; -- SUBSTR로 추출하고 JUMIN에 넣어서 RPAD를 한다

SELECT COUNT(*) INWON FROM CUSTOM
WHERE JOB = '회사원';

SELECT COUNT(*) INWON FROM CUSTOM
WHERE ADDR1 LIKE '서울%';


SELECT COUNT(*) INWON FROM CUSTOM
WHERE POINT>=200;

SELECT * FROM COMPANY;

SELECT SUM(PAY) FROM COMPANY
WHERE POSIT='대리';

SELECT * FROM CUSTOM;

SELECT JOB,COUNT(*) INWON FROM CUSTOM
GROUP BY JOB;

SELECT SCHOL, ROUND(AVG(POINT)) FROM CUSTOM
GROUP BY SCHOL;

SELECT ADDR1,ROUND(SUM(POINT)) INWON, MAX(POINT) "MAX", MIN(POINT) "MIN" FROM CUSTOM
GROUP BY ADDR1;

SELECT
CASE SEX
WHEN '1' THEN '남자'
WHEN '0' THEN '여자'
END GENDER
, ROUND(AVG(AGE))"AVG",COUNT(*) "CNT"
FROM CUSTOM
GROUP BY SEX;

/*
SELECT 
CASE 컬럼명                         
	WHEN 1 THEN 100  ELSE 0, -- 하나일때 ELSE 쓰는 곳                         
	WHEN 2 THEN 200                         
	WHEN 3 THEN 300                         
	WHEN 4 THEN 400                          
	ELSE 500                        
END AS RESULT             
FROM DUAL;
*/

SELECT * FROM COMPANY;

-- 직책별 월급의 합, 평균, MAX, MIN
SELECT POSIT, COUNT(*) CNT, ROUND(AVG(PAY)) 평균, MAX(PAY) 최대, MIN(PAY) 최소 
FROM COMPANY GROUP BY POSIT
HAVING COUNT(*) > 60;

------------------------------------------------------------------1/25

-- JOIN (공통컬럼을 토대로 두 테이블을 합친다)
/* 

★EQUI JOIN:오라클에서 사용하는데 많이 쓰임 (INNER JOIN: ANSI 국제 표준)
NON-EQUI JOIN (ORACLE에만 있음)
OUTER JOIN
CROSS JOIN
☆SELF JOIN

JOIN문의 조건문은 ON을 사용
SELECT문은 WHERE
GROUP BY문은 HAVING
*/


-- EQUI JOIN -------------------------------------------------------------------------------
SELECT * FROM CUSTOM;
SELECT * FROM COMPANY;

SELECT A.USERID,USERNAME, ADDR1, COMPANY, DEPT, POSIT, PAY
FROM CUSTOM A, COMPANY B -- 테이블의 별칭(AS는 사용 X) 
WHERE A.USERID = B.USERID;

-- INNER JOIN
SELECT A.USERID,USERNAME, ADDR1, COMPANY, DEPT, POSIT, PAY
FROM CUSTOM A INNER JOIN COMPANY B -- INNER 생략가능
ON A.USERID = B.USERID;

-- 테이블'CUSTOM'에서 USERID, USERNAME을 검색하고
-- POINT 테이블에서 제품 구입, 로그인에 관계된 POINT 점수(PRODUCT, LOGIN)을 검색
SELECT * FROM POINT;

-- EQUI JOIN
SELECT A.USERID, USERNAME,PRODUCT,LOGIN
FROM CUSTOM A,POINT B
WHERE A.USERID = B.USERID AND B.LOGIN>=10;
-- INNER JOIN
SELECT A.USERID, USERNAME,PRODUCT,LOGIN
FROM CUSTOM A JOIN POINT B
ON A.USERID = B.USERID --AND B.LOGIN>=10;
WHERE B.LOGIN>=10;

-- OUTERJOIN (외부조인) ---------------------------------------------------------------------
-- 특정 테이블이 기준이 되서 데이터를 찾아옴 ( 기준이 되는 테이블 A에 일부분인 B(+)를 붙임 ) 
SELECT COUNT(*) FROM CUSTOM; -- 459
SELECT COUNT(*) FROM COMPANY; -- 464
-- CUSTOM 기준
SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM A, COMPANY B
WHERE A.USERID = B.USERID(+); -- 459개
-- COMPANY 기준
SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM A, COMPANY B
WHERE A.USERID (+) = B.USERID ; -- 464개 

-- INNER JOIN : ANSI 표준 -----------------------------------------------------------------------------
-- CUSTOM 기준
SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM A LEFT OUTER JOIN COMPANY B
ON A.USERID = B.USERID;
-- COMPANY 기준
SELECT A.USERID, USERNAME, ADDR1, COMPANY, DEPT
FROM CUSTOM A RIGHT OUTER JOIN COMPANY B
ON A.USERID = B.USERID;

-- EXAMPLE

SELECT * FROM RESEARCH;
SELECT COUNT(*) FROM RESEARCH;

SELECT A.USERID,USERNAME,ANSWER
FROM CUSTOM A, RESEARCH B
WHERE A.USERID = B.USERID(+) AND ANSWER IS NULL;

SELECT A.USERID,USERNAME,ANSWER
FROM CUSTOM A LEFT OUTER JOIN RESEARCH B
ON A.USERID = B.USERID
WHERE ANSWER IS NULL;


-- CROSS JOIN (상호조인) : A(a1,a2) B(b1,b2,b3) -> 2*3 = 6 -------------------------------
SELECT COUNT(*) FROM CUSTOM; -- 459
SELECT COUNT(*) FROM COMPANY; -- 464

SELECT A.USERID,USERNAME,ADDR1,COMPANY,DEPT
FROM CUSTOM A, COMPANY B;  -- 459 * 464 = 21만개
-- WHERE A.USERID = B.USERID;

-- 쓸모없는 데이터이지만 데이터를 토대로 테스트 등 활용할때 사용

-- SELF JOIN : 중복된 값을 찾기---------------------------------------------------------------------
SELECT * FROM CUSTOM;
DESC CUSTOM;

-- 암기 --
SELECT DISTINCT A.*
FROM CUSTOM A, CUSTOM B
WHERE A.USERNAME = B.USERNAME
AND A.USERID<>B.USERID
ORDER BY A.USERNAME;

-- 'CUSTOM'테이블에서 '제주도'에 살고 있는 사람 중에 동일한 이름을 갖는 행을 검색
SELECT * FROM CUSTOM
WHERE ADDR1 = '제주도';

SELECT DISTINCT A.*
FROM CUSTOM A INNER JOIN CUSTOM B
ON A.USERNAME = B.USERNAME
WHERE A.JUMIN<>B.JUMIN AND A.ADDR1 = '제주도' AND B.ADDR1 = '제주도'
ORDER BY A.USERNAME;

-- 세 개의 테이블 합치기
SELECT A.USERID, USERNAME, COMPANY, DEPT, PRODUCT, LOGIN
FROM CUSTOM A, COMPANY B, POINT C
WHERE A.USERID = B.USERID AND A.USERID = C.USERID;

SELECT A.USERID, USERNAME, COMPANY, DEPT, PRODUCT, LOGIN
FROM CUSTOM A INNER JOIN COMPANY B
ON A.USERID = B.USERID INNER JOIN POINT C
ON A.USERID = C.USERID;


-- UNION/ALL--------------------------------------------------------------------------------------
SELECT * FROM CUSTOM;

CREATE TABLE JEJU
AS
SELECT * FROM CUSTOM WHERE ADDR1 = '제주도';
SELECT * FROM JEJU;

CREATE TABLE KYUNG
AS
SELECT * FROM CUSTOM WHERE ADDR1 = '경기도';
SELECT * FROM KYUNG;

CREATE TABLE SEOUL
AS
SELECT * FROM CUSTOM WHERE ADDR1 = '서울특별시';
SELECT * FROM SEOUL;

-----------------------------\
SELECT * FROM JEJU
UNION
SELECT * FROM KYUNG
UNION
SELECT * FROM SEOUL;


-- SUB-QUERY(하위쿼리)------------------------------------------------------

-- 'COMPANY' 테이블에서 USERID, COMPANY, DEPT, PAY와 평균 월급을 검색
SELECT USERID, COMPANY, DEPT, PAY, AVG(PAY) FROM COMPANY; --X 다중 & 단일

SELECT ROUND(AVG(PAY)) FROM COMPANY; -- A

SELECT USERID,COMPANY,DEPT,PAY,1782888 AVG_PAY FROM COMPANY; --B

SELECT USERID,COMPANY,DEPT,PAY,
(SELECT ROUND(AVG(PAY)) FROM COMPANY) AVG_PAY FROM COMPANY; --B(A) 합체

SELECT USERID,COMPANY,DEPT,PAY,
(SELECT ROUND(AVG(PAY)) FROM COMPANY) AVG_PAY,
PAY-(SELECT ROUND(AVG(PAY)) FROM COMPANY) 차액
FROM COMPANY;

--'CUSTOM'테이블에서 평균 나이 이상인 행들을 검색
SELECT AVG(AGE) FROM CUSTOM;

SELECT * FROM CUSTOM 
WHERE AGE>=(SELECT AVG(AGE) FROM CUSTOM);

-- 'COMPANY' 테이블에서 평균월급보다 적은 월급을 받는 행을 검색
SELECT AVG(PAY) FROM COMPANY;

SELECT * FROM COMPANY 
WHERE PAY<(SELECT AVG(PAY) FROM COMPANY);

--'현대자동차' 회사에 근무하는 고객의 USERID, USERNAME, ADDR1, SCHOL열을 검색--------------------------------------------
-- CASE 1 : 하위쿼리 --
SELECT * FROM CUSTOM;
SELECT * FROM COMPANY;

SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%'; ------------?

SELECT * FROM CUSTOM
WHERE USERID IN ('EE9224','el3409');

SELECT * FROM CUSTOM
WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%') ;

-- CASE 2 : JOIN --
SELECT A.* 
FROM CUSTOM A, COMPANY B
WHERE A.USERID = B.USERID 
AND COMPANY LIKE '현대자동차%';

-- SALES테이블에서 4회 이상 판매 기록이 있는 고객들의 기본 정보를 검색--------------------------------------
SELECT * FROM CUSTOM;
SELECT * FROM SALES;

-- CASE 1: 하위 쿼리--

--SELECT USERID FROM SALES WHERE COUNT(USERID) >= '4';내가쓴거..
SELECT USERID, COUNT(*) CNT FROM SALES
GROUP BY USERID
HAVING COUNT(*) >=4;

SELECT * FROM CUSTOM 
WHERE USERID IN 
(SELECT USERID FROM SALES
GROUP BY USERID
HAVING COUNT(*) >=4);

-- CASE 2 : INLINE VIEW (JOIN문을 쓰는 이유! 많이 쓰고 고급 코딩) --
SELECT A.*, CNT 
FROM CUSTOM A, (SELECT USERID, COUNT(*) CNT FROM SALES
GROUP BY USERID
HAVING COUNT(*) >=4) B
WHERE A.USERID = B.USERID;

-- 총 판매금액이 100만원 이상인 'CUSTOM' 테이블에 있는 고객의 기본 정보---------------------
SELECT * FROM CUSTOM;
SELECT * FROM SALES ORDER BY USERID;

SELECT USERID, SUM(PRICE), COUNT(*) CNT FROM SALES
GROUP BY USERID
HAVING SUM(PRICE)>=1000000;

-- CASE 1 : 하위쿼리 --
SELECT * FROM CUSTOM
WHERE USERID IN 
(SELECT USERID FROM SALES
GROUP BY USERID
HAVING SUM(PRICE)>=1000000);

-- CASE 2 : JOIN / INLINE VIEW --
SELECT A.*,CNT,HAP
FROM CUSTOM A, (SELECT USERID, SUM(PRICE) HAP, COUNT(*) CNT FROM SALES
GROUP BY USERID
HAVING SUM(PRICE)>=1000000) B
WHERE A.USERID = B.USERID; 

-- ANY, ALL -------------------------------------------------------------------------------------------------------

SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도' ORDER BY POINT;

/*
-- 132 ~ 269
>ANY : 132보다 큰 데이터
<ANY : 269보다 작은 데이터
>ALL : 269보다 큰 데이터
<ALL : 132보다 작은 데이터
*/

-- >ANY : 훨씬 빠름
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT >ANY (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도');
-- MIN() : 위와 같음 
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT > (SELECT MIN(POINT) FROM CUSTOM WHERE ADDR1 = '제주도');

------------------------------------------------------------------------
-- <ANY
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT < ANY (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도');
-- MAX()
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT < (SELECT MAX(POINT) FROM CUSTOM WHERE ADDR1 = '제주도');

------------------------------------------------------------------------
-- >ALL
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT > ALL (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도');
--  
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT > (SELECT MAX(POINT) FROM CUSTOM WHERE ADDR1 = '제주도');
------------------------------------------------------------------------
-- <ALL
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT < ALL (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도');
--  
SELECT USERID, USERNAME, POINT FROM CUSTOM
WHERE POINT < (SELECT MIN(POINT) FROM CUSTOM WHERE ADDR1 = '제주도');
------------------------------------------------------------------------??
SELECT * FROM CUSTOM WHERE POINT = 131;

UPDATE CUSTOM SET POINT = 131 WHERE USERID = 'nn4942';
------------------------------------------------------------------------??

SELECT USERID, USERNAME,ADDR1, SCHOL FROM CUSTOM
WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

SELECT USERID, USERNAME,ADDR1, SCHOL FROM CUSTOM
WHERE USERID =ANY (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');
------------------------------------------------------------------------

SELECT USERID, USERNAME,ADDR1, SCHOL FROM CUSTOM
WHERE USERID NOT IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

SELECT USERID, USERNAME,ADDR1, SCHOL FROM CUSTOM
WHERE USERID <>ALL (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');
----------------------------------------------------------------------

SELECT USERID, USERNAME,ADDR1, SCHOL FROM CUSTOM
WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

-- 상관 쿼리 
SELECT USERID, USERNAME,ADDR1, SCHOL FROM CUSTOM
WHERE EXISTS (SELECT * FROM COMPANY WHERE USERID=CUSTOM.USERID AND COMPANY LIKE '현대자동차%');

SELECT USERID, USERNAME,ADDR1, SCHOL FROM CUSTOM
WHERE NOT EXISTS (SELECT * FROM COMPANY WHERE USERID=CUSTOM.USERID AND COMPANY LIKE '현대자동차%');

----------------------------------------------------------------------

SELECT * FROM CUSTOM WHERE ADDR1='경기도' AND AGE <= 20;

SELECT * FROM (SELECT * FROM CUSTOM WHERE ADDR1 = '경기도') A;

SELECT * FROM (SELECT * FROM CUSTOM WHERE ADDR1 = '경기도') A
WHERE A.AGE <=20;



-- 2/3 -----------------------------------------------------------------------------------------------------

create table 사원
(사원번호 number(10),
사원명 varchar2(10),
부서번호 number(2),
직급 varchar2(10),
우편번호 char(7),
주소 varchar2(50),
전화번호 char(15),
급여 number(5),
커미션 number(5),
입사일 date,
성별 char(6),
사수번호 number(10)
);

insert into 사원 values(2001,'이순신',10,'부장','125-365','서울 용산구','02-985-1254',3500,100,'1980-12-01','남자',null);
insert into 사원 values(2002,'홍길동',10,'대리','354-865','서울 강남구','02-865-1254',4000,'','2000-01-25','남자',2004);
insert into 사원 values(2003,'성유리',20,'사원','587-456','부산 해운대구','051-256-9874',2500,100,'2002-05-24','여자',2002);
insert into 사원 values(2004,'옥주현',30,'과장','987-452','서울 강남구','02-33-6589',5000,'','1997-03-22','여자',2001);
insert into 사원 values(2005,'길건',10,'대리','123-322','서울 성동구','02-888-9564',3000,100,'1999-07-15','여자',2004);
insert into 사원 values(2006,'한지혜',20,'사원','154-762','서울 송파구','02-3369-9874',2000,'','2003-05-22','여자',2005);
insert into 사원 values(2007,'박솔미',30,'대리','367-985','서울 영등포구','02-451-2563',3000,100,'2006-01-25','여자',2004);
insert into 사원 values(2008,'이효리',40,'사원','552-126','서울 중구','02-447-3256',2000,'','2001-02-02','여자',2007);

SELECT * FROM 사원;
DESC 사원;
COMMIT;

-- PL/SQL ---------------------------------------------------
-- CMD에서 /로 끝냄, 서버에 과부하가 걸리지 않고, 네트워크상 트래픽이 적음
DECLARE 
TYPE FIRSTTYPE IS RECORD 
(A 사원.사원명%TYPE, B 사원.직급%TYPE, C 사원.급여%TYPE); -- 자료형을 DESC로 확인하지 않고 바로 가져온다

CUS FIRSTTYPE; --CUS라는 변수 3개

BEGIN -- 시작
SELECT 사원명, 직급, 급여 INTO CUS FROM 사원 WHERE 사원번호 = 2001;

DBMS_OUTPUT.PUT_LINE(' 사원명  직급  급여 ');
DBMS_OUTPUT.PUT_LINE('--------------------');
DBMS_OUTPUT.PUT_LINE(CUS.A||'  '||CUS.B||'  '||TO_CHAR(CUS.C)); -- 자료형을 CHARACTER로 변환
DBMS_OUTPUT.PUT_LINE('현재 질의한 계정은 '||USER||'입니다'); -- USER 내장되어있는 변수
DBMS_OUTPUT.PUT_LINE('현재 질의한 시간은 '||TO_CHAR(SYSDATE,'YYYY-MM-DD HH:MM:SS'));
END; -- 끝

--SET SERVEROUTPUT ON;
--DECLARE부터 END까지 다시 찍기

SELECT * FROM 사원;

SELECT 사원번호, 사원명, 직급, 급여, 커미션, F_TAX(2001) TAX FROM 사원
WHERE 사원번호 = 2001;

--------------------------------------------------
ACCEPT ID PROMTPT '검색할 아이디를 입력하세요: ';

DECLARE

TYPE GOGAK IS RECORD
(A CUSTOM.USERID%TYPE,
B CUSTOM.USERNAME%TYPE,
C NUMBER(12,2),
D NUMBER(5));

CUS GOGAK;

BEGIN
SELECT C.USERID, C.USERNAME, S.합계, S.구입횟수 INTO CUS
FROM CUSTOM C, 
(SELECT USERID, SUM(PRICE) 합계, COUNT(*) 구입횟수
FROM SALES GROUP BY USERID) S
WHERE C.USERID = S.USERID AND C.USERID = '&ID'; -- ID변수 치환변수

DBMS_OUTPUT.PUT_LINE('아이디: '||CUS.A);
DBMS_OUTPUT.PUT_LINE('이  름: '||CUS.B);
DBMS_OUTPUT.PUT_LINE('판매액: '||CUS.C);
DBMS_OUTPUT.PUT_LINE('금  액: '||CUS.D);

END;

--------------------------------------------------------------

-- 직책을 입력받아 그 직책의 급여의 총액, 평균월급, 인원수를 찾으시오

CREATE OR REPLACE PROCEDURE SEARCHJIK
(JIK IN VARCHAR2)
IS
A NUMBER:=0;
B NUMBER(12,2):=0;
C NUMBER:=0;
BEGIN
SELECT SUM(PAY),ROUND(AVG(PAY)), COUNT(*) INTO A,B,C
FROM COMPANY WHERE POSIT=JIK;


DBMS_OUTPUT.PUT_LINE('급여총액: '||A||'원');
DBMS_OUTPUT.PUT_LINE('평균월급: '||B||'원');
DBMS_OUTPUT.PUT_LINE('인원수: '||C||'명');
END SEARCHJIK;

---------------------------------------------------------------

SELECT * FROM CUSTOM;
DESC CUSTOM;

-- CUSTOM 테이블에 INSERT 시키는 프로시져(CUS_IN) -----------------------------------------------------------------

CREATE OR REPLACE PROCEDURE CUS_IN
(A VARCHAR2, B VARCHAR2, C VARCHAR2, D VARCHAR2, E VARCHAR2, F VARCHAR2, G VARCHAR2, 
H VARCHAR2, I VARCHAR2, J VARCHAR2, K VARCHAR2, L VARCHAR2, M NUMBER, N DATE)
IS
BEGIN
INSERT INTO CUSTOM VALUES (A,B,C,D,E,F,G,H,I,J,K,L,M,N);
COMMIT;
END;

EXEC CUS_IN('A001','SUZI','123',27,'0','123-123','서울','강남구','역삼동','010-123-1234','가수','대졸',123,SYSDATE);

SELECT * FROM CUSTOM WHERE USERID = 'A001';


-- CUSTOM 테이블에 UPDATE 시키는 프로시져(CUS_UP) ------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE CUS_UP
(A VARCHAR2, B VARCHAR2, C VARCHAR2, D VARCHAR2, E VARCHAR2, F VARCHAR2, G VARCHAR2, 
H VARCHAR2, I VARCHAR2, J VARCHAR2, K VARCHAR2, L VARCHAR2, M NUMBER, N DATE)
IS
BEGIN
UPDATE CUSTOM SET USERNAME=B, JUMIN=C, AGE=D, SEX=E, ZIP=F, 
ADDR1=G, ADDR2=H, ADDR3=I, TEL=J, JOB=K, SCHOL = L, POINT = M, REGDATE =N
WHERE USERID = A;
COMMIT;
END;

EXEC CUS_IN('A002','HYEMIN','123',27,'0','123-123','서울','강남구','역삼동','010-123-1234','가수','대졸',123,SYSDATE);

SELECT * FROM CUSTOM WHERE USERID = 'A002';

-- CUSTOM 테이블에 DELETE 시키는 프로시져(CUS_DEL)

CREATE OR REPLACE PROCEDURE CUS_DEL
(A VARCHAR2)
IS BEGIN
DELETE CUSTOM WHERE USERID= 'A002';
COMMIT;
END;

-- 설명을 입력받아 이름만 출력

LEE@XE> CREATE OR REPLACE FUNCTION F_SDAY(V_DATE IN DATE)
  2  RETURN VARCHAR2
  3  IS
  4  GUNDATE VARCHAR2(20);
  5  BEGIN
  6  GUNDATE :=
  7  FLOOR(MONTHS_BETWEEN(SYSDATE,V_DATE)/12)||'년'||
  8  FLOOR(MOD(MONTHS_BETWEEN(SYSDATE,V_DATE),12))||'개월';
  9  RETURN GUNDATE;
 10  END;
 11  /


LEE@XE> --주민번호를 입력했을때 성별을 반환해주는 함수
LEE@XE> CREATE OR REPLACE FUNCTION F_GENDER
  2  (V_JUMIN IN VARCHAR2)
  3  RETURN VARCHAR2
  4  IS
  5  GENDER VARCHAR2(2);
  6  BEGIN
  7  GENDER:=SUBSTR(V_JUMIN,8,1);
  8  IF
  9  GENDER IN ('1','3') THEN
 10  GENDER:='남';
 11  ELSE
 12  GENDER:='여';
 13  END IF;
 14  RETURN GENDER;
 15  END;
 16  /

-- 성별 반환
CREATE OR REPLACE FUNCTION F_GENDER
(V_JUMIN IN VARCHAR2)
RETURN VARCHAR2
IS
GENDER VARCHAR2(2);
BEGIN
GENDER:=SUBSTR(V_JUMIN,8,1);
IF
GENDER IN ('1','3') THEN
GENDER:='남';
ELSE
GENDER:='여';
END IF;
RETURN GENDER;
END;
/



